var noteGraphic = Paths.image(ClientPrefs.noteSkin=="Quants" ? "pixelUI/QUANTNOTE_assets" : "pixelUI/NOTE_assets");
var usePixelNotes = noteGraphic!=null;

function onCreate()
{
	game.introAlts = ['','pixelUI/ready-pixel', 'pixelUI/set-pixel', 'pixelUI/date-pixel'];
	game.introSoundsSuffix = "-pixel";
	
	GameOverSubstate.deathSoundName = 'fnf_loss_sfx-pixel';
	GameOverSubstate.loopSoundName = 'gameOver-pixel';
	GameOverSubstate.endSoundName = 'gameOverEnd-pixel';
}

function onCountdownSpritePost(spr){
	spr.antialiasing = false;
	spr.scale.set(6, 6);
}

function roundTo(num, roundFactor){
	return Math.round(num / 6) * 6;
}

var RatingSprite;
var ratingGroup;

var lastCombos;
var lastJudge;
var lr = true;

function onDisplayCombo(combo)
{
	if (combo > 0 && combo < 10 && combo != 0)
		return Function_Stop;

	var splitCombo = Std.string(Math.abs(combo)).split();
	while (splitCombo.length < 3)
		splitCombo.unshift("0");
	if (combo < 0)
		combo.unshift("neg");		
		
	var bs = 0;
	var totalWidth = 9 * 6 * splitCombo.length;
	lr=!lr;
	
	/*
	if (ClientPrefs.simpleJudge)
		while (lastCombos.length > 0)
			lastCombos.pop().kill();
	*/
	
	for (char in splitCombo){	
		var spr = ratingGroup.recycle(RatingSprite, null, false);
		spr.loadGraphic(Paths.image("pixelUI/num"+char+"-pixel"));
		spr.scale.set(6,6);
		spr.updateHitbox();
		spr.antialiasing = false;
		
		//spr.alpha = 1;
		spr.velocity.set();
		spr.acceleration.set();

		spr.setPosition(game.ratingOrigin[0] + ClientPrefs.comboOffset[0], game.ratingOrigin[1] - ClientPrefs.comboOffset[1]);
		spr.offset.set(game.totalWidth / 2 - 9*6*bs, spr.height/2);
		
		ratingGroup.remove(spr, true);
		ratingGroup.add(spr);
		
		var startY = spr.offset.y - spr.height / 2;
		var targetY = spr.offset.y + spr.height / 2;
		var startX = spr.offset.x;
		var targetX = spr.offset.x + 6*8*(lr ? 1 : -1);
		spr.tween = FlxTween.num(0, 1, 1.2, {onComplete: spr.kill}, (prog)->{
			if (prog < 0.5)
				spr.alpha = FlxEase.backOut(prog*2);
			else if (prog > 0.8)
				spr.alpha = 1 - (prog - 0.8) / 0.2;

			var num = FlxEase.backOut(prog > 0.5 ? 1 : prog*2);
			spr.offset.y = FlxMath.lerp(startY, targetY, num); //roundTo( FlxMath.lerp(startY, targetY, num), 6);
			spr.offset.x = roundTo( FlxMath.lerp(startX, targetX, FlxEase.circIn(prog)), 6 );

		});
		
		lastCombos.push(spr);
		
		bs++;
	}

	return Function_Stop;
}

function onDisplayJudgment(name){
	var spr; 
	
	/*
	if (ClientPrefs.simpleJudge){
		if (lastJudge.alive)
			lastJudge.kill();
		
		spr = lastJudge;
		spr.revive();
	}else
	*/
		spr = ratingGroup.recycle(RatingSprite, null, false);

	spr.loadGraphic(Paths.image("pixelUI/"+name+"-pixel"));
	spr.scale.set(6,6);
	spr.updateHitbox();
	spr.antialiasing = false;
	
	//spr.alpha = 1;
	spr.velocity.set();
	spr.acceleration.set();
	
	spr.setPosition(game.ratingOrigin[0] + ClientPrefs.comboOffset[0], game.ratingOrigin[1] - ClientPrefs.comboOffset[1]);
	spr.offset.set(spr.width / 2, spr.height/2);
	
	var startY = spr.offset.y - spr.height / 2;
	var targetY = spr.offset.y + spr.height / 2;
	var startX = spr.offset.x;
	var targetX = spr.offset.x + 6*8*(lr=!lr ? 1 : -1);
	spr.tween = FlxTween.num(0, 1, 1.2, {onComplete: spr.kill}, (prog)->{

		if (prog < 0.5)
			spr.alpha = FlxEase.backOut(prog*2);
		else if (prog > 0.8)
			spr.alpha = 1 - (prog - 0.8) / 0.2;
	
		var num = FlxEase.backOut(prog > 0.5 ? 1 : prog*2);
		spr.offset.y = FlxMath.lerp(startY, targetY, num); //roundTo( FlxMath.lerp(startY, targetY, num), 6);
		spr.offset.x = roundTo( FlxMath.lerp(startX, targetX, FlxEase.circIn(prog)), 6 );
	});
	
	ratingGroup.remove(spr, true);
	ratingGroup.add(spr);

	return Function_Stop;
}

function onCreatePost(){
	ratingGroup = game.ratingGroup;
	RatingSprite = Type.getClass(ratingGroup.members[0]); // ridiculous LOL
	lastCombos = game.lastCombos;
	lastJudge = game.lastJudge;
	// trace(RatingSprite, Type.getClassName(ratingGroup.members[0]));
	
	if (!usePixelNotes) 
		return;

    for(note in game.allNotes){
        if(note.isSustainNote)
            note.reloadNote(note.texPrefix, note.tex, note.texSuffix + 'ENDS', 'pixelUI', 4, 2);
        else
            note.reloadNote(note.texPrefix, note.tex, note.texSuffix, 'pixelUI', 4, 5);
        
        note.scale.set(6, 6);
        note.noteType = note.noteType; // reset the splashes
        note.antialiasing = false;
    }
}
function postReceptorGeneration(){
	if (!usePixelNotes) return;

    for(field in game.playfields){
        for(strum in field.strumNotes){
            strum.loadGraphic(noteGraphic, true, Math.floor(noteGraphic.width / 4), Math.floor(noteGraphic.height / 5));
            strum.animation.add('static', [strum.noteData]);
            strum.animation.add('pressed', [strum.noteData + 4, strum.noteData + 8], 12, false);
            strum.animation.add('confirm', [strum.noteData + 12, strum.noteData + 16], 24, false);
            strum.scale.set(6, 6);
            strum.playAnim("static", true);
			
			strum.antialiasing = false;
        }
    }
}

////
var bgGhouls;

function onLoad(){
	var posX = 400;
	var posY = 200;
	if(!ClientPrefs.lowQuality) {
		var bg:BGSprite = new BGSprite('stages/schoolEvil/animatedEvilSchool', posX, posY, 0.8, 0.9, ['background 2'], true);
		bg.scale.set(6, 6);
		bg.antialiasing = false;
		add(bg);

		bgGhouls = new BGSprite('stages/schoolEvil/bgGhouls', -100, 190, 0.9, 0.9, ['BG freaks glitch instance'], false);
		bgGhouls.setGraphicSize(Std.int(bgGhouls.width * daPixelZoom));
		bgGhouls.updateHitbox();
		bgGhouls.visible = false;
		bgGhouls.antialiasing = false;
		add(bgGhouls);
	} else {
		var bg:BGSprite = new BGSprite('stages/schoolEvil/animatedEvilSchool_low', posX, posY, 0.8, 0.9);
		bg.scale.set(6, 6);
		bg.antialiasing = false;
		add(bg);
	}
}