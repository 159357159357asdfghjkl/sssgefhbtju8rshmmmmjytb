var noteGraphic = Paths.image(ClientPrefs.noteSkin=="Quants" ? "pixelUI/QUANTNOTE_assets" : "pixelUI/NOTE_assets");
var usePixelNotes = noteGraphic!=null;

function onCreate()
{
	game.introAlts = ['','pixelUI/ready-pixel', 'pixelUI/set-pixel', 'pixelUI/date-pixel'];
	game.introSoundsSuffix = "-pixel";
	
	GameOverSubstate.deathSoundName = 'fnf_loss_sfx-pixel';
	GameOverSubstate.loopSoundName = 'gameOver-pixel';
	GameOverSubstate.endSoundName = 'gameOverEnd-pixel';
}

function onCountdownSpritePost(spr){
	spr.antialiasing = false;
	spr.scale.set(6, 6);
}

function roundTo(num, roundFactor){
	return Math.round(num / 6) * 6;
}

var RatingSprite;
var ratingGroup;

var lastCombos;
var lastJudge;
var lr = true;

function anim(spr, startX, targetX, startY, targetY, prog){
	if (prog < 0.5)
		spr.alpha = FlxEase.backOut(prog*2);
	else if (prog > 0.8)
		spr.alpha = 1 - (prog - 0.8) / 0.2;

	var num = FlxEase.backOut(prog > 0.5 ? 1 : prog*2);
	spr.offset.set(
		roundTo( FlxMath.lerp(startX, targetX, FlxEase.circIn(prog)), 6 ),
		FlxMath.lerp(startY, targetY, num)
	);
}

function prepareSpr(name, ?spr){
	var spr = spr!=null ? spr : ratingGroup.recycle(RatingSprite, null, false);
	
	spr.loadGraphic(Paths.image("pixelUI/"+name+"-pixel"));
	spr.scale.set(6,6);
	spr.updateHitbox();
	spr.antialiasing = false;
	
	//spr.alpha = 1;
	spr.velocity.set();
	spr.acceleration.set();
	spr.scrollFactor.set(1, 1);

	return spr;
}

function onDisplayCombo(combo)
{
	if (combo > 0 && combo < 10 && combo != 0)
		return Function_Stop;

	var comboColor = game.comboColor;
	var splitCombo = Std.string(Math.abs(combo)).split();
	while (splitCombo.length < 3)
		splitCombo.unshift("0");
	if (combo < 0){
		splitCombo.unshift("neg");		
		comboColor = 0xFFF7C5DC;
	}
		
	var bs = 0;
	var totalWidth = 9 * 6 * splitCombo.length;
	lr=!lr;
	
	var posX = roundTo(game.ratingOrigin[0] + ClientPrefs.comboOffset[2], 6);
	var posY = roundTo(game.ratingOrigin[1] - ClientPrefs.comboOffset[3], 6);
	
	for (char in splitCombo){	
		var spr = prepareSpr("num"+char);
		spr.color = comboColor;

		spr.setPosition(posX, posY);
		spr.offset.set(
			totalWidth / 2 - (9 * 6 * bs),
			spr.height / 2
		);
		
		var startX	=	spr.offset.x;
		var targetX =	spr.offset.x + 6*9*(lr ? 1 : -1);
		var startY	=	spr.offset.y - spr.height;
		var targetY =	spr.offset.y;
		spr.tween = FlxTween.num(
			0, 1, 1.2, 
			{onComplete: spr.kill}, 
			(prog)->{anim(spr, startX, targetX, startY, targetY, prog);}
		);
		
		ratingGroup.remove(spr, true);
		ratingGroup.add(spr);
		
		bs++;
	}

	return Function_Stop;
}

function onDisplayJudgment(name){
	var spr = prepareSpr(name);
	spr.color = 0xFFFFFFFF;
	
	spr.setPosition(
		roundTo(game.ratingOrigin[0] + ClientPrefs.comboOffset[0], 6), 
		roundTo(game.ratingOrigin[1] - ClientPrefs.comboOffset[1], 6)
	);
	spr.offset.set(
		spr.width / 2, 
		spr.height / 2
	);
	
	var startX	=	spr.offset.x;
	var targetX =	spr.offset.x + 6*9*(lr=!lr ? 1 : -1);
	var startY	=	spr.offset.y - spr.height;
	var targetY =	spr.offset.y;
	spr.tween = FlxTween.num(
		0, 1, 1.2, 
		{onComplete: spr.kill}, 
		(prog)->{anim(spr, startX, targetX, startY, targetY, prog);}
	);
	
	ratingGroup.remove(spr, true);
	ratingGroup.add(spr);

	return Function_Stop;
}

function onCreatePost(){
	ratingGroup = game.ratingGroup;
	RatingSprite = Type.getClass(ratingGroup.members[0]); // ridiculous LOL
	lastCombos = game.lastCombos;
	lastJudge = game.lastJudge;
	// trace(RatingSprite, Type.getClassName(ratingGroup.members[0]));
	
	if (!usePixelNotes) 
		return;

    for(note in game.allNotes){
        if(note.isSustainNote)
            note.reloadNote(note.texPrefix, note.tex, note.texSuffix + 'ENDS', 'pixelUI', 4, 2);
        else
            note.reloadNote(note.texPrefix, note.tex, note.texSuffix, 'pixelUI', 4, 5);
        
        note.scale.set(6, 6);
        note.noteType = note.noteType; // reset the splashes
        note.antialiasing = false;
    }
}
function postReceptorGeneration(){
	if (!usePixelNotes) return;

    for(field in game.playfields){
        for(strum in field.strumNotes){
            strum.loadGraphic(noteGraphic, true, Math.floor(noteGraphic.width / 4), Math.floor(noteGraphic.height / 5));
            strum.animation.add('static', [strum.noteData]);
            strum.animation.add('pressed', [strum.noteData + 4, strum.noteData + 8], 12, false);
            strum.animation.add('confirm', [strum.noteData + 12, strum.noteData + 16], 24, false);
            strum.scale.set(6, 6);
            strum.playAnim("static", true);
			
			strum.antialiasing = false;
        }
    }
}

////
var bgGhouls;

function onLoad(){
	var posX = 400;
	var posY = 200;
	if(!ClientPrefs.lowQuality) {
		var bg:BGSprite = new BGSprite('stages/schoolEvil/animatedEvilSchool', posX, posY, 0.8, 0.9, ['background 2'], true);
		bg.scale.set(6, 6);
		bg.antialiasing = false;
		add(bg);

		bgGhouls = new BGSprite('stages/schoolEvil/bgGhouls', -100, 190, 0.9, 0.9, ['BG freaks glitch instance'], false);
		bgGhouls.scale.set(6, 6);
		bgGhouls.updateHitbox();
		bgGhouls.visible = false;
		bgGhouls.antialiasing = false;
		add(bgGhouls);
	} else {
		var bg:BGSprite = new BGSprite('stages/schoolEvil/animatedEvilSchool_low', posX, posY, 0.8, 0.9);
		bg.scale.set(6, 6);
		bg.antialiasing = false;
		add(bg);
	}
}