package;

import flixel.text.FlxText;
import flixel.util.FlxColor;
import scripts.FunkinHScript;

// this is still heavy WIP
// to use just add a folder named "states" in a global mod (either contents/global or a mod marked as global in its metadata.json)
// and add a script called TestingState.hscript in that
// that will let you modify this state!! rn you can only modify 'create' and 'update'
// code should look a lil like this

/*
function create(){
    // anything to be done before the state create code
    statecreate();
    // anything after
}

function update(elapsed:Float){
    // before state update
    stateupdate(elapsed);
    // after state update
}
*/

// statecreate/stateupdate can be replaced with super.create or super.update, if you dont want the code from the original state to be ran
// they can also only be called in the relevant function, so you cant call stateupdate in create or statecreate in update
// this is all a heavy WIP

@:build(scripts.Macro.addScriptingCallbacks())
class TestingState extends MusicBeatState {
    @:noCompletion
	@:dontInject
    function _super_create()return super.create();
	@:noCompletion
	@:dontInject
    function _super_beatHit()return super.beatHit();
	@:noCompletion
	@:dontInject
    function _super_stepHit()return super.stepHit(); // etc etc, these should be generated by a macro
	@:noCompletion
	@:dontInject
    function _super_update(elapsed:Float)return super.update(elapsed); // etc etc, these should be generated by a macro
    
	@:noCompletion
	var _scriptSuperObject = {};

    function new(){
		this._scriptSuperObject = {
			create: _super_create,
			beatHit: _super_beatHit,
			stepHit: _super_stepHit,
            update: _super_update
		}
        super(); 
        var defaultVars:Map<String, Dynamic> = [];
		defaultVars.set("super", _scriptSuperObject);
        defaultVars.set("this", this);
		defaultVars.set("add", add);
		defaultVars.set("remove", remove);
		defaultVars.set("insert", insert);
		defaultVars.set("members", members);

		for (filePath in Paths.getFolders("states"))
		{
			var file = filePath + 'TestingState.hscript';
			if (Paths.exists(file))
			{
				script = FunkinHScript.fromFile(file, "TestingState", defaultVars);
				script.call("new", []);
				break;
			}
        }
    }

    override function create(){
		trace("the original create function yeah");
		var text = new FlxText(0, 100);
		text.text = "TESTING STATE\nPRESS F7 TO RESET STATE";
		text.setFormat(Paths.font("calibri.ttf"), 32, FlxColor.WHITE, FlxTextAlign.CENTER, FlxTextBorderStyle.NONE, FlxColor.WHITE);
		text.screenCenter(X);
		add(text);

        super.create();
    }

    override function update(elapsed:Float) {
        trace("Calling update from TestingState: " + elapsed);
        super.update(elapsed);
    }
}